Implementation of Local Laplacian Filters: Edge-aware Image Processing with a Laplacian Pyramid March 2013

IMAGES:
Found in image subfolder. Each image is named <X>_description.png where X corresponds to pressing that key in the UI to generate that image i.e. All 01-*.png images can be generated by pressing the '1' key when the program is running.

01-*gaussian_pyramid.png: represents different levels of a gaussian pyramid
01-*laplacian_pyramid.png: clamped absolute value of laplacian pyramid 
02-collapsed_pyramid.png: reconstructed image from laplacian pyramid (4 levels as per assignment)
03-kitten_sharpened_<X>.png: represents image sharpened by multiplying all child Laplacian layer (except for the highest level) by the specified factor (1_5 means X1.5). 03-kitten_sharpened.png is the sharpening as implied by the assignment (doubling the second largest level).
04-noised_image.png: image with added random noise.
04-cored_image.png: image after coring.
05-<image>_<sigma>_<alpha>.png: represents local laplacian filtering with the specified paramters e.g. 05-flower_pt3_2.png implies local laplacian filtering with sigma=0.3 and alpha=2.
06-<image>_<sigma>_<alpha>.png: some colour images.  This images are created by filtering the RGB channels and not the intensity as specified in the paper/assignment.
07-<image>_<sigma>_<alpha>.png: run the algorithm only on the value channel of HSV. There seems to be artifacts when running on the kitten image . . . Some aspects of the paper on tone manipulation I couldn't figure out in time.

The original colour images are butterfly.png, church.png, kitten.png and lenna.png.

Test Images are found from Google Images:
http://www.pixoto.com/images-photography/animals---cats/portraits/ginger-kitten-16066726
http://www.mrwallpaper.com/wallpapers/red-flower-butterfly-1280x960.jpg
http://4.bp.blogspot.com/_RTd22U9tNJg/TSvU7_0j0fI/AAAAAAAAE6o/P2SYN2axmv8/s1600/Trinity-Church-Antarctica-Bellingshausen-Station.png